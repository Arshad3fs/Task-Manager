[{"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\index.js":"1","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\App.js":"2","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\reportWebVitals.js":"3","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\utils\\AppConstants.js":"4","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\theme\\theme.js":"5","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\signin\\Signin.js":"6","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\my-tasks\\MyTasks.js":"7","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\signup\\Signup.js":"8","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\my-reportees-tasks\\MyReporteesTasks.js":"9","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\welcome\\Welcome.js":"10","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\reports\\MyReportsByStatus.js":"11","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\header\\Header.js":"12","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\create-task\\CreateTask.js":"13","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\common\\EnhancedTableHead.js":"14","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\confirmation-dialog\\ConfirmationDialog.js":"15","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\data\\apps.js":"16","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\footer\\Footer.js":"17","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\client\\client.js":"18","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\utils\\GraphqlQueries.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":1587,"mtime":1613388582131,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":603,"mtime":1613400770576,"results":"24","hashOfConfig":"21"},{"size":386,"mtime":1611510261425,"results":"25","hashOfConfig":"21"},{"size":3967,"mtime":1613665801218,"results":"26","hashOfConfig":"21"},{"size":13035,"mtime":1613800560158,"results":"27","hashOfConfig":"21"},{"size":5152,"mtime":1613665768021,"results":"28","hashOfConfig":"21"},{"size":12345,"mtime":1612105083271,"results":"29","hashOfConfig":"21"},{"size":3545,"mtime":1611936379754,"results":"30","hashOfConfig":"21"},{"size":8995,"mtime":1611999473339,"results":"31","hashOfConfig":"21"},{"size":3926,"mtime":1612106385132,"results":"32","hashOfConfig":"21"},{"size":13048,"mtime":1613751967757,"results":"33","hashOfConfig":"21"},{"size":2440,"mtime":1613796355733,"results":"34","hashOfConfig":"21"},{"size":1232,"mtime":1612196429816,"results":"35","hashOfConfig":"21"},{"size":504,"mtime":1612196321481,"results":"36","hashOfConfig":"21"},{"size":574,"mtime":1611808314388,"results":"37","hashOfConfig":"21"},{"size":401,"mtime":1613388147678,"results":"38","hashOfConfig":"21"},{"size":1656,"mtime":1613796592527,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1xpvfe5",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\index.js",[],["81","82"],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\App.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\reportWebVitals.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\utils\\AppConstants.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\theme\\theme.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\signin\\Signin.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\my-tasks\\MyTasks.js",["83"],"import { createStyles, TextField } from \"@material-ui/core\";\r\nimport CreateTask from \"../create-task/CreateTask\";\r\nimport Header from \"../header/Header\";\r\nimport { TASKS } from \"../../utils/AppConstants\";\r\nimport React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EnhancedTableHead from \"../common/EnhancedTableHead\";\r\nimport clsx from \"clsx\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ConfirmationDialog from \"../confirmation-dialog/ConfirmationDialog\"\r\nimport { DELETE_TASK, MY_TASKS_QUERY } from \"../../utils/GraphqlQueries\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        container: {\r\n            minHeight: \"100vh\",\r\n            overflow: \"hidden\"\r\n        },\r\n        containerBody: {\r\n          padding: 10,\r\n          paddingTop: 0,\r\n          maxHeight: \"calc(100vh - 73px)\"\r\n        },        \r\n        taskActionContainer: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            height: \"10vh\",\r\n            width: \"100%\"\r\n        },\r\n        filledButton: {\r\n            padding: \"10px 0px\",\r\n            backgroundColor: \"#eb984ef2\",\r\n            border: \"1.5px solid #eb984ef2\",\r\n            borderRadius: \"30px\",\r\n            fontWeight: \"bold\",\r\n            outline: \"none\",\r\n            width: \"250px\",\r\n            color: \"#000000b3\",\r\n            cursor: \"pointer\"\r\n        },\r\n        secondaryButton: {\r\n          backgroundColor: \"white\",\r\n          color: \"#e47a1b\",\r\n          borderColor: \"#e47a1b\",\r\n        },\r\n        root: {\r\n            width: '100%',\r\n          },\r\n          paper: {\r\n            width: '100%',\r\n            marginBottom: theme.spacing(2),            \r\n          },\r\n          table: {\r\n            minWidth: 750,\r\n            maxHeight: \"calc(100vh - 150px)\",\r\n            overflowY: \"auto\"\r\n          },\r\n          visuallyHidden: {\r\n            border: 0,\r\n            clip: 'rect(0 0 0 0)',\r\n            height: 1,\r\n            margin: -1,\r\n            overflow: 'hidden',\r\n            padding: 0,\r\n            position: 'absolute',\r\n            top: 20,\r\n            width: 1,\r\n          },\r\n          highlightRow: {\r\n            backgroundColor: \"#eb984e36 !important\"\r\n          }\r\n    })\r\n)\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  function getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n  }\r\n  \r\n  function stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n  }\r\n\r\n  const headCells = [\r\n    { id: 'edit', numeric: false, label: 'Edit' },\r\n    { id: 'delete', numeric: false, label: 'Delete' },\r\n    { id: 'title', numeric: false, label: 'Title' },\r\n    { id: 'category', numeric: false, label: 'Category' },\r\n    { id: 'status', numeric: false, label: 'Status' },\r\n    { id: 'desc', numeric: false, label: \"Desc\" },\r\n    { id: 'Start Date', numeric: false, label: 'Start Date' },\r\n    // { id: 'Start Time', numeric: false, label: 'Start Time' },\r\n    { id: 'End Date', numeric: false, label: 'End/Target Date' },\r\n    // { id: 'End Time', numeric: false, label: 'End/Target Time' },\r\n  ];\r\n\r\nfunction MyTasks (){\r\n    const classes = useStyles();\r\n    const [showDialog, setShowDialog] = React.useState(false);\r\n    const [taskToEdit, setTaskToEdit] = React.useState(null);\r\n    const [showConfirmation, setShowConfirmation] = React.useState(false);\r\n\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('title');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);    \r\n    const [rows, setRows] = React.useState([]);\r\n    const [tasks, setTasks] = React.useState([]);\r\n\r\n    const { loading, data } = useQuery(MY_TASKS_QUERY, {variables: {email: 'arshad3fs@gmail.com'}});\r\n    const [deleteTask] = useMutation(DELETE_TASK);    \r\n\r\n    useEffect( () => {     \r\n      setTasks(data ? data.getMyTasks : []);\r\n      setRows(data ? data.getMyTasks : []);\r\n    }, [ data ]);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, id) => {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const handleCreateNewTask = () => {\r\n        setShowDialog(!showDialog);        \r\n        setTaskToEdit(null);\r\n    }\r\n\r\n    const handleConfirmation = ()=> setShowConfirmation(!showConfirmation);\r\n\r\n    const deleteSelected = (taskId) => {\r\n          taskId = typeof taskId === \"string\" ? taskId : selected[0];\r\n          deleteTask({variables: {taskId: taskId},\r\n            refetchQueries: [\r\n              { query: MY_TASKS_QUERY, variables: {email: 'arshad3fs@gmail.com'} }\r\n            ]});      \r\n      setShowConfirmation(false);\r\n    }\r\n\r\n    const filterTasks = (event) => {      \r\n      const filterText = event.target.value.toUpperCase();\r\n      const filteredtasks = tasks.filter (task => {\r\n        return task.title.toUpperCase().includes(filterText);\r\n      });      \r\n      setRows(filteredtasks);\r\n    }\r\n\r\n    const editTask = (id) => {\r\n      setShowDialog(!showDialog);\r\n      setTaskToEdit(rows.find(row => row.id === id));\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.container}>\r\n                <Header></Header>\r\n                { loading ? <div> loading...</div> : \"\" }\r\n                {showConfirmation ? \r\n                    <ConfirmationDialog header={'Confirmation'} \r\n                                        contentText={'Selected tasks will be deleted. Are you sure you want to proceed?'} \r\n                                        handleActionButton={deleteSelected} \r\n                                        handleClose={handleConfirmation}\r\n                                        showDialog={showConfirmation} />: \"\"}\r\n                <div className={classes.containerBody}>\r\n                    {showDialog ? <CreateTask showDialog={showDialog} setShowDialog={handleCreateNewTask} taskToEdit={taskToEdit}/> : \"\"}\r\n                    <div className={classes.taskActionContainer}>\r\n                        <button className={classes.filledButton} onClick={handleCreateNewTask}>Create New Task</button>\r\n                        <div>\r\n                          <TextField id=\"dd\" label=\"Start typing here to filter tasks by Title\"                       \r\n                                    onChange={filterTasks}\r\n                                    style={{width: 500}} />\r\n                        </div>\r\n                        <button className={clsx(classes.filledButton, classes.secondaryButton)}\r\n                                onClick={handleConfirmation}>Delete Selected Tasks</button>\r\n                    </div>\r\n                    <div className={classes.root}>\r\n                      <Paper className={classes.paper}>\r\n            <TableContainer>\r\n              <Table\r\n                className={classes.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                size={'medium'}\r\n                aria-label=\"enhanced table\"\r\n              >\r\n                <EnhancedTableHead\r\n                  classes={classes}\r\n                  numSelected={selected.length}\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  onSelectAllClick={handleSelectAllClick}\r\n                  onRequestSort={handleRequestSort}\r\n                  rowCount={rows.length}\r\n                  headCells={headCells}\r\n                />\r\n                <TableBody>\r\n                  {stableSort(rows, getComparator(order, orderBy))\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const isItemSelected = isSelected(row.id);\r\n                      const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          tabIndex={-1}\r\n                          key={row.id}\r\n                          selected={isItemSelected}\r\n                          classes={{selected: classes.highlightRow}}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              checked={isItemSelected}\r\n                              color={\"primary\"}\r\n                              onChange={(event) => handleClick(event, row.id)}\r\n                              inputProps={{ 'aria-labelledby': labelId }}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell align=\"left\">\r\n                            <EditIcon style={{cursor: \"pointer\"}} onClick={()=>editTask(row.id)}></EditIcon>\r\n                          </TableCell>\r\n                          <TableCell align=\"left\">\r\n                            <DeleteIcon style={{color: 'red', cursor: \"pointer\"}} onClick={()=>deleteSelected(row.id)}></DeleteIcon>\r\n                          </TableCell>\r\n                          <TableCell component=\"th\" id={labelId} scope=\"row\" align=\"left\">\r\n                            {row.title}\r\n                          </TableCell>\r\n                          <TableCell align=\"left\">{row.category}</TableCell>\r\n                          <TableCell align=\"left\">{row.status}</TableCell>\r\n                          <TableCell align=\"left\">{row.desc}</TableCell>\r\n                          <TableCell align=\"left\">{row.startDateTime}</TableCell>\r\n                          {/* <TableCell align=\"left\">{row.startTimeStr}</TableCell> */}\r\n                          <TableCell align=\"left\">{row.endDateTime}</TableCell>\r\n                          {/* <TableCell align=\"left\">{row.targetTimeStr}</TableCell> */}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow style={{ height: 53 * emptyRows }}>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n                    </div>\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyTasks;\r\n","C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\signup\\Signup.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\my-reportees-tasks\\MyReporteesTasks.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\welcome\\Welcome.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\reports\\MyReportsByStatus.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\header\\Header.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\create-task\\CreateTask.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\common\\EnhancedTableHead.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\confirmation-dialog\\ConfirmationDialog.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\data\\apps.js",[],["84","85"],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\components\\footer\\Footer.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\client\\client.js",[],"C:\\Data\\Repositories\\task-manager\\task-manager-ui\\src\\utils\\GraphqlQueries.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":15},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'TASKS' is defined but never used.","Identifier","unusedVar",["96"],["97"],"no-global-assign","no-unsafe-negation"]